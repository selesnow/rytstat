[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexey Seleznev. Author, maintainer. Netpeak. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seleznev (2022). rytstat: Work 'YouTube API'. R package version 0.3.0, https://selesnow.github.io/rytstat/docs/.","code":"@Manual{,   title = {rytstat: Work with 'YouTube API'},   author = {Alexey Seleznev},   year = {2022},   note = {R package version 0.3.0},   url = {https://selesnow.github.io/rytstat/docs/}, }"},{"path":"/index.html","id":"rytstat---r-interface-for-work-with-youtube-apis-","dir":"","previous_headings":"","what":"Work with YouTube API","title":"Work with YouTube API","text":"rytstat package R interface working following YouTube APIs: YouTube Reporting API YouTube Analytics API YouTube Data API , rytstat allows request data available YouTube Creator Studio analysis visualization using R language.","code":""},{"path":"/index.html","id":"privacy-policy","dir":"","previous_headings":"","what":"Privacy Policy","title":"Work with YouTube API","text":"rytstat package authorization uses gargle package, credentials obtained authorization stored exclusively local PC, can find folder credentials cached using ryt_auth_cache_path() function. loading data YouTube channel rytstat needs next scopes: View monetary non-monetary YouTube Analytics reports YouTube content View YouTube account View manage assets associated content YouTube View YouTube Analytics reports YouTube content Manage YouTube account details see Official YouTube API documentation. package transfer credentials data obtained advertising accounts third parties, however, responsibility information leakage remains side package user. author bear responsibility safety, careful transferring cached credentials third parties. details, recommend read following articles official documentation gargle package: Stewarding cache user tokens Auth using R browser gargle gets tokens","code":""},{"path":"/index.html","id":"authorization-process","dir":"","previous_headings":"Privacy Policy","what":"Authorization process","title":"Work with YouTube API","text":"run gads_auth('@gmail.com') start OAuth Dance browser: Typical OAuth dance browser, initiated within R Upon success, see message browser: Authentication complete. Please close page return R. credentials cached locally PC form RDS files.","code":""},{"path":"/index.html","id":"key-points","dir":"","previous_headings":"Privacy Policy","what":"Key points","title":"Work with YouTube API","text":"default, gargle caches user tokens centrally, user level, keys labels also convey Google identity associated token. Token storage relies serialized R objects. , tokens stored locally PC form RDS files.","code":""},{"path":"/index.html","id":"use-own-oauth-client","dir":"","previous_headings":"Privacy Policy","what":"Use own OAuth client","title":"Work with YouTube API","text":"can use OAuth app:","code":"app <- httr::oauth_app(appname = \"app name\", key = \"app id\", secret = \"app secret\") ryt_auth_configure(app = app)  # or from json file  ryt_auth_configure(path = 'D:/ga_auth/app.json')  # run authorization ryt_auth('me@gmail.com')"},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Work with YouTube API","text":"can install rytstat CRAN GitHub: или GitHub:","code":"install.packages(\"rytstat\") devtools::install_github('selesnow/rytstat')"},{"path":[]},{"path":"/index.html","id":"auth","dir":"","previous_headings":"Examples","what":"Auth","title":"Work with YouTube API","text":"","code":"library(rytstat) library(httr)  # auth app app <- oauth_app(     appname = 'my app',     key = 'app id',      secret = 'app secret')  ryt_auth_configure(app = app)  ryt_auth(email = 'me@gmail.com')"},{"path":"/index.html","id":"using-youtube-data-api","dir":"","previous_headings":"Examples","what":"Using YouTube Data API","title":"Work with YouTube API","text":"","code":"# load channel data channel <- ryt_get_channels()  # load videos videos <- ryt_get_video_list() video_details <- ryt_get_video_details(video_id = videos$id_video_id)  # load playlists pl <- ryt_get_playlists() pl_items <- ryt_get_playlist_items(      playlist_id = pl$id[1],      part = c('contentDetails', 'snippet'),      fields = 'items(id,snippet/channelId,snippet/title,contentDetails/videoId)' )  # search channels, playlists or videos search_res_videos <- ryt_search(     type            = 'video',     q               = 'r language tutorial',     published_after = '2022-03-01T00:00:00Z',     published_before = '2022-06-01T00:00:00Z',     max_results     = 10  )  search_res_playlists <- ryt_search(     type             = 'playlist',     q                = 'r language tutorial',     published_after  = '2022-03-01T00:00:00Z',     published_before = '2022-06-01T00:00:00Z',     max_results      = 50 )  search_res_channels <- ryt_search(     type             = 'channel',     q                = 'r language tutorial',     published_after  = '2022-03-01T00:00:00Z',     published_before = '2022-06-01T00:00:00Z',     max_results      = 50 )"},{"path":"/index.html","id":"using-youtube-analytics-api","dir":"","previous_headings":"Examples","what":"Using YouTube Analytics API","title":"Work with YouTube API","text":"","code":"library(rytstat)  # get list of videos videos <- ryt_get_video_list()  # get statistics by day and videos # you can specify no more than 500 videos at a time video_stat <- ryt_get_analytics(   start_date = '2021-01-01',    end_date = '2021-09-01',   dimensions = c('day', 'video'),   metrics = c('views',                'likes',                'dislikes',                'comments',                'shares'),   filters = str_glue('video=={str_c(head(videos$id_video_id, 500), collapse=\",\")}') )"},{"path":"/index.html","id":"using-youtube-reporting-api","dir":"","previous_headings":"Examples","what":"Using YouTube Reporting API","title":"Work with YouTube API","text":"","code":"# auth ryt_auth('me@gmail.com')  # get reporting data ## create job ryt_create_job('channel_basic_a2')  ## get job list jobs2 <- ryt_get_job_list()  ## get job report list reports <- ryt_get_report_list(   job_id = jobs$id[1],   created_after = '2021-10-20T15:01:23.045678Z' )  # get report data data <- ryt_get_report(   download_url = reports$downloadUrl[1] )  # delete job ryt_delete_job(jobs$id[1])"},{"path":"/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Work with YouTube API","text":"Alexey Seleznev, Head analytics dept. Netpeak Telegram Channel: R4marketing YouTube Channel: R4marketing email: selesnow@gmail.com facebook: facebook.com/selesnow blog: alexeyseleznev.wordpress.com","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 ryoutube authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/privacy_policy.html","id":"authorization-process","dir":"","previous_headings":"","what":"Authorization process","title":"NA","text":"run gads_auth('@gmail.com') start OAuth Dance browser: Typical OAuth dance browser, initiated within R Upon success, see message browser: Authentication complete. Please close page return R. credentials cached locally PC form RDS files.","code":""},{"path":"/privacy_policy.html","id":"key-points","dir":"","previous_headings":"","what":"Key points","title":"NA","text":"default, gargle caches user tokens centrally, user level, keys labels also convey Google identity associated token. Token storage relies serialized R objects. , tokens stored locally PC form RDS files.","code":""},{"path":"/privacy_policy.html","id":"use-own-oauth-client","dir":"","previous_headings":"","what":"Use own OAuth client","title":"NA","text":"can use OAuth app:","code":"app <- httr::oauth_app(appname = \"app name\", key = \"app id\", secret = \"app secret\") ryt_auth_configure(app = app)  # or from json file  ryt_auth_configure(path = 'D:/ga_auth/app.json')  # run authorization ryt_auth('me@gmail.com')"},{"path":"/reference/reporting_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list of report types that the channel or content owner can retrieve. Each item in the list contains an id property, which identifies the report's ID, and you need this value to schedule a reporting job. — ryt_get_report_types","title":"Returns a list of report types that the channel or content owner can retrieve. Each item in the list contains an id property, which identifies the report's ID, and you need this value to schedule a reporting job. — ryt_get_report_types","text":"creating reporting job, instructing YouTube generate report daily basis. report available within 24 hours time job created. resource response contains id property, specifies ID YouTube uses uniquely identify job. need ID retrieve list reports generated job delete job.","code":""},{"path":"/reference/reporting_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list of report types that the channel or content owner can retrieve. Each item in the list contains an id property, which identifies the report's ID, and you need this value to schedule a reporting job. — ryt_get_report_types","text":"","code":"ryt_get_report_types()  ryt_create_job(   report_type = c(\"channel_annotations_a1\", \"channel_basic_a2\", \"channel_cards_a1\",     \"channel_combined_a2\", \"channel_demographics_a1\", \"channel_device_os_a2\",     \"channel_end_screens_a1\", \"channel_playback_location_a2\", \"channel_province_a2\",     \"channel_sharing_service_a1\", \"channel_playback_location_a2\", \"channel_province_a2\",     \"channel_sharing_service_a1\", \"channel_subtitles_a2\", \"channel_traffic_source_a2\",     \"playlist_basic_a1\", \"playlist_device_os_a1\", \"playlist_playback_location_a1\",     \"playlist_province_a1\", \"playlist_traffic_source_a1\") )  ryt_get_job_list()  ryt_get_report_list(   job_id,   created_after = NULL,   start_time_at_or_after = NULL,   start_time_before = NULL )  ryt_get_report(download_url)  ryt_get_report_metadata(job_id, report_id)  ryt_delete_job(job_id)"},{"path":"/reference/reporting_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list of report types that the channel or content owner can retrieve. Each item in the list contains an id property, which identifies the report's ID, and you need this value to schedule a reporting job. — ryt_get_report_types","text":"report_type type report job creates. property value corresponds id reportType retrieved ryt_get_report_types function. job_id ID YouTube uses uniquely identify job deleted. Use ryt_get_job_list. created_after specified, parameter indicates API response contain reports created specified date time, including new reports backfilled data. Note value pertains time report created dates associated returned data. value timestamp RFC3339 UTC \"Zulu\" format, accurate microseconds. Example: \"2015-10-02T15:01:23.045678Z\". start_time_at_or_after parameter indicates API response contain reports earliest data report specified date. Whereas createdAfter parameter value pertains time report created, date pertains data report. value timestamp RFC3339 UTC \"Zulu\" format, accurate microseconds. Example: \"2015-10-02T15:01:23.045678Z\". start_time_before parameter indicates API response contain reports earliest data report specified date. Whereas createdAfter parameter value pertains time report created, date pertains data report. value timestamp RFC3339 UTC \"Zulu\" format, accurate microseconds. Example: \"2015-10-02T15:01:23.045678Z\". download_url download URL, can get ryt_get_report_list ryt_get_report_metadata report_id ID YouTube uses uniquely identify report retrieved. Use ryt_get_report_list","code":""},{"path":"/reference/reporting_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list of report types that the channel or content owner can retrieve. Each item in the list contains an id property, which identifies the report's ID, and you need this value to schedule a reporting job. — ryt_get_report_types","text":"ryt_get_report_types: tibble report types ryt_reports_create_job: return value, called side effects ryt_get_job_list: tibble jobs metadata ryt_get_report_list: tibble reports metadata ryt_get_report: tibble report data ryt_get_report_metadata: list report metadata ryt_reports_delete_job: return value, called side effects","code":""},{"path":[]},{"path":"/reference/reporting_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list of report types that the channel or content owner can retrieve. Each item in the list contains an id property, which identifies the report's ID, and you need this value to schedule a reporting job. — ryt_get_report_types","text":"","code":"if (FALSE) {  # auth  ryt_auth('me@gmail.com')   # get reporting data  ## create job  ryt_reports_create_job('channel_basic_a2')   ## get job list  jobs <- ryt_get_job_list()   ## get job report list  reports <- ryt_get_report_list(    job_id = jobs$id[1],    created_after = '2021-10-20T15:01:23.045678Z'  )   ## get report data  data <- ryt_get_report(    download_url = reports$downloadUrl[1]  )   ## delete job  ryt_reports_delete_job(jobs$id[1])  }"},{"path":"/reference/rytstat-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rytstat: Work with 'YouTube API' — rytstat-package","title":"rytstat: Work with 'YouTube API' — rytstat-package","text":"Provide function get data 'YouTube Data API' https://developers.google.com/youtube/v3/docs/, 'YouTube Analytics API' https://developers.google.com/youtube/analytics/reference/ 'YouTube Reporting API' https://developers.google.com/youtube/reporting/v1/reports.","code":""},{"path":[]},{"path":"/reference/rytstat-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rytstat: Work with 'YouTube API' — rytstat-package","text":"Maintainer: Alexey Seleznev selesnow@gmail.com (ORCID) contributors: Netpeak [copyright holder]","code":""},{"path":"/reference/ryt_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authorization in YouTube API — ryt_auth","title":"Authorization in YouTube API — ryt_auth","text":"Authorize rytstat view manage YouTube Account. function wrapper around gargle::token_fetch(). default, directed web browser, asked sign Google account, grant rytstat permission operate behalf YouTube. default, permission, user credentials cached folder home directory, can automatically refreshed, necessary. Storage user level means token can used across multiple projects tokens less likely synced cloud accident. interacting R within browser (applies RStudio Server, RStudio Workbench, RStudio Cloud), need variant flow, known --band auth (\"oob\"). happen automatically, can request use_oob = TRUE , persistently, setting option via options(gargle_oob_default = TRUE).","code":""},{"path":"/reference/ryt_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization in YouTube API — ryt_auth","text":"","code":"ryt_auth(   email = gargle::gargle_oauth_email(),   path = NULL,   cache = gargle::gargle_oauth_cache(),   use_oob = gargle::gargle_oob_default(),   token = NULL )"},{"path":"/reference/ryt_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization in YouTube API — ryt_auth","text":"email Optional. Allows user target specific Google identity. path Path JSON file identifying service account cache Specifies OAuth token cache. use_oob Whether prefer \"band\" authentication. token token class Token2.0 object ","code":""},{"path":"/reference/ryt_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authorization in YouTube API — ryt_auth","text":"Token2.0","code":""},{"path":"/reference/ryt_auth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authorization in YouTube API — ryt_auth","text":"users, time, need call ryt_auth() explicitly -- triggered first action requires authorization. Even called, default arguments often suffice. However, necessary, function allows user explicitly: Declare Google identity use, via email address. multiple cached tokens, can clarify one use. can also force rytstat switch one identity another. cached token email, triggers return browser choose identity give consent. can specify just domain using glob pattern. means script containing email = \"*@example.com\" can run without tweaks machine either alice@example.com bob@example.com. Use service account token workload identity federation. Bring Token2.0. Specify non-default behavior re: token caching --bound authentication. Customize scopes. details many ways find token, see gargle::token_fetch(). deeper control auth, use ryt_auth_configure() bring OAuth app API key. Read gargle options, see gargle::gargle_options.","code":""},{"path":[]},{"path":"/reference/ryt_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authorization in YouTube API — ryt_auth","text":"","code":"if (FALSE) { ## load/refresh existing credentials, if available ## otherwise, go to browser for authentication and authorization ryt_auth()  ## force use of a token associated with a specific email ryt_auth(email = \"yourname@example.com\")  ## force a menu where you can choose from existing tokens or ## choose to get a new one ryt_auth(email = NA)  ## ----------------------- ## use own OAuth client app ryt_auth_configure(     path = \"path/to/your/oauth_client.json\" )  ryt_auth(email = \"yourname@example.com\") }"},{"path":"/reference/ryt_auth_configure.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit and view auth configuration — ryt_auth_configure","title":"Edit and view auth configuration — ryt_auth_configure","text":"functions give control visibility auth configuration ryt_auth() . ryt_auth_configure() lets user specify : OAuth app, used obtaining user token. API key. rytstat de-authorized via ryt_deauth(), requests sent API key lieu token. See vignette get API credentials . user configure settings, internal defaults used. ryt_oauth_app() ryt_api_key() retrieve currently configured OAuth app API key, respectively.","code":""},{"path":"/reference/ryt_auth_configure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit and view auth configuration — ryt_auth_configure","text":"","code":"ryt_auth_configure(app, path, api_key)  ryt_auth_cache_path()  ryt_open_auth_cache_folder()  ryt_api_key()  ryt_oauth_app()"},{"path":"/reference/ryt_auth_configure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit and view auth configuration — ryt_auth_configure","text":"app OAuth app, sense httr::oauth_app(). path JSON downloaded Google Cloud Platform Console, containing client id (aka key) secret, one forms supported txt argument jsonlite::fromJSON() (typically, file path JSON string). api_key API key.","code":""},{"path":"/reference/ryt_auth_configure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit and view auth configuration — ryt_auth_configure","text":"ryt_auth_configure(): object R6 class gargle::AuthState, invisibly. ryt_oauth_app(): current user-configured httr::oauth_app(). ryt_api_key(): current user-configured API key.","code":""},{"path":[]},{"path":"/reference/ryt_auth_configure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit and view auth configuration — ryt_auth_configure","text":"","code":"if (FALSE) { # see and store the current user-configured OAuth app (probaby `NULL`) (original_app <- ryt_oauth_app())  # see and store the current user-configured API key (probaby `NULL`) (original_api_key <- ryt_api_key())  if (require(httr)) {   # bring your own app via client id (aka key) and secret   google_app <- httr::oauth_app(     \"my-awesome-google-api-wrapping-package\",     key = \"YOUR_CLIENT_ID_GOES_HERE\",     secret = \"YOUR_SECRET_GOES_HERE\"   )   google_key <- \"YOUR_API_KEY\"   ryt_auth_configure(app = google_app, api_key = google_key)    # confirm the changes   ryt_oauth_app()   ryt_api_key()    # bring your own app via JSON downloaded from Google Developers Console   # this file has the same structure as the JSON from Google   ryt_auth_configure(path = app_path)    # confirm the changes   ryt_oauth_app()  }  # restore original auth config gs4_auth_configure(app = original_app, api_key = original_api_key) }"},{"path":"/reference/ryt_deauth.html","id":null,"dir":"Reference","previous_headings":"","what":"Suspend authorization — ryt_deauth","title":"Suspend authorization — ryt_deauth","text":"Put rytstat de-authorized state. Instead sending token, rytstat send API key. can used access public resources Google sign-required. handy using rytstat non-interactive setting make requests require token. prevent attempt obtain token interactively browser. user can configure API key via ryt_auth_configure() retrieve key via ryt_api_key(). absence user-configured key, built-default key used.","code":""},{"path":"/reference/ryt_deauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suspend authorization — ryt_deauth","text":"","code":"ryt_deauth()"},{"path":"/reference/ryt_deauth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suspend authorization — ryt_deauth","text":"suspend authorization","code":""},{"path":[]},{"path":"/reference/ryt_get_analytics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get statistics from 'YouTube Analytics API' — ryt_get_analytics","title":"Get statistics from 'YouTube Analytics API' — ryt_get_analytics","text":"YouTube Analytics API enables generate custom reports containing YouTube Analytics data. API supports reports channels content owners.","code":""},{"path":"/reference/ryt_get_analytics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get statistics from 'YouTube Analytics API' — ryt_get_analytics","text":"","code":"ryt_get_analytics(   start_date = Sys.Date() - 14,   end_date = Sys.Date(),   metrics = c(\"views\", \"estimatedMinutesWatched\", \"averageViewDuration\",     \"averageViewPercentage\", \"subscribersGained\"),   dimensions = \"day\",   filters = NULL )"},{"path":"/reference/ryt_get_analytics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get statistics from 'YouTube Analytics API' — ryt_get_analytics","text":"start_date start date fetching YouTube Analytics data. value YYYY-MM-DD format. end_date end date fetching YouTube Analytics data. value YYYY-MM-DD format. metrics Character vector YouTube Analytics metrics, views likes,dislikes. See documentation channel reports list reports can retrieve metrics available report. Metrics document contains definitions metrics. dimensions Character vector YouTube Analytics dimensions, video ageGroup,gender. Dimensions document contains definitions dimensions. filters Character vector filters applied retrieving YouTube Analytics data. documentation channel reports reports identifies dimensions can used filter report, Dimensions document defines dimensions.","code":""},{"path":"/reference/ryt_get_analytics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get statistics from 'YouTube Analytics API' — ryt_get_analytics","text":"tibble analytics data","code":""},{"path":"/reference/ryt_get_analytics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get statistics from 'YouTube Analytics API' — ryt_get_analytics","text":"","code":"if (FALSE) { # auth ryt_auth()  # get list of your videos videos <- ryt_get_videos()  # function for loading video stat get_videos_stat <- function(video_id) {    data <- ryt_get_analytics(     metrics = c('views', 'likes', 'dislikes', 'comments', 'shares'),     filters = stringr::str_glue('video=={video_id}')   )    if ( nrow(data) > 0 ) {     data <- mutate(data, video_id = video_id) } }  # load video stat video_stat <- purrr::map_df(videos$id_video_id, get_videos_stat)  # join stat with video metadata video_stat <- left_join(video_stat,                         videos,                         by = c(\"video_id\" = \"id_video_id\")) %>%               select(video_id,                      title,                      day,                      views,                      likes,                      dislikes,                      comments,                      shares) }"},{"path":"/reference/ryt_get_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get channel info from 'YouTube API' — ryt_get_channels","title":"Get channel info from 'YouTube API' — ryt_get_channels","text":"Get channel info 'YouTube API'","code":""},{"path":"/reference/ryt_get_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get channel info from 'YouTube API' — ryt_get_channels","text":"","code":"ryt_get_channels(   part = c(\"contentDetails\", \"id\", \"snippet\", \"statistics\", \"status\", \"topicDetails\"),   fields = NULL )"},{"path":"/reference/ryt_get_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get channel info from 'YouTube API' — ryt_get_channels","text":"part part parameter specifies comma-separated list one channel resource properties API response include., see API documentation. fields Allows specify individual nested part fields","code":""},{"path":"/reference/ryt_get_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get channel info from 'YouTube API' — ryt_get_channels","text":"tibble channel metadata","code":""},{"path":"/reference/ryt_get_channels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get channel info from 'YouTube API' — ryt_get_channels","text":"Parts fields part: auditDetails brandingSettings contentDetails contentOwnerDetails id localizations snippet statistics status topicDetails parts fields details kind - Identifies API resource's type. etag - Etag resource. id - ID YouTube uses uniquely identify channel. snippet - snippet object contains basic details channel, title, description, thumbnail images. snippet.title - channel's title. snippet.description - channel's description. property's value maximum length 1000 characters. snippet.customUrl - channel's custom URL. YouTube Help Center explains eligibility requirements getting custom URL well set URL. snippet.publishedAt - date time channel created. value specified ISO 8601 format. snippet.thumbnails - map thumbnail images associated channel. object map, key name thumbnail image, value object contains information thumbnail. snippet.thumbnails.(key) - Valid key values : default, medium, high. snippet.thumbnails.(key).url - image's URL. See snippet.thumbnails property definition additional guidelines using thumbnail URLs application. snippet.thumbnails.(key).width - image's width. snippet.thumbnails.(key).height - image's height. snippet.defaultLanguage - language text channel resource's snippet.title snippet.description properties. snippet.localized - snippet.localized object contains localized title description channel contains channel's title description default language channel's metadata. snippet.localized.title - localized channel title. snippet.localized.description - localized channel description. snippet.country - country channel associated. contentDetails - contentDetails object encapsulates information channel's content. contentDetails.relatedPlaylists - relatedPlaylists object map identifies playlists associated channel, channel's uploaded videos liked videos. contentDetails.relatedPlaylists.likes - ID playlist contains channel's liked videos. contentDetails.relatedPlaylists.uploads - ID playlist contains channel's uploaded videos. statistics - statistics object encapsulates statistics channel. statistics.viewCount - number times channel viewed. statistics.subscriberCount - number subscribers channel . statistics.hiddenSubscriberCount - Indicates whether channel's subscriber count publicly visible. statistics.videoCount - number public videos uploaded channel. topicDetails - topicDetails object encapsulates information topics associated channel. topicDetails.topicIds[] - list topic IDs associated channel. topicDetails.topicCategories[] - list Wikipedia URLs describe channel's content. status - status object encapsulates information privacy status channel. status.privacyStatus - Privacy status channel. status.isLinked - Indicates whether channel data identifies user already linked either YouTube username Google+ account. status.longUploadsStatus - Indicates whether channel eligible upload videos 15 minutes long. status.madeForKids - value indicates whether channel designated child-directed, contains current \"made kids\" status channel. status.selfDeclaredMadeForKids - channels.update request, property allows channel owner designate channel child-directed. brandingSettings - brandingSettings object encapsulates information branding channel. brandingSettings.channel - channel object encapsulates branding properties channel page. brandingSettings.channel.title - channel's title. title maximum length 30 characters. brandingSettings.channel.description - channel description, appears channel information box channel page. property's value maximum length 1000 characters. brandingSettings.channel.keywords - Keywords associated channel. brandingSettings.channel.trackingAnalyticsAccountId - ID Google Analytics account want use track measure traffic channel. brandingSettings.channel.moderateComments - setting determines whether user-submitted comments left channel page need approved channel owner publicly visible. brandingSettings.channel.unsubscribedTrailer - video play featured video module channel page's browse view unsubscribed viewers. brandingSettings.channel.defaultLanguage - language text channel resource's snippet.title snippet.description properties. brandingSettings.channel.country - country channel associated. Update property set value snippet.country property. brandingSettings.watch - watch object encapsulates branding properties watch pages channel's videos. brandingSettings.watch.textColor - text color video watch page's branded area. brandingSettings.watch.backgroundColor - background color video watch page's branded area. auditDetails - auditDetails object encapsulates channel data multichannel network (MCN) evaluate determining whether accept reject particular channel. auditDetails.overallGoodStanding - field indicates whether issues channel. Currently, field represents result logical operation communityGuidelinesGoodStanding, copyrightStrikesGoodStanding, contentIdClaimsGoodStanding properties, meaning property value true properties also value true. auditDetails.communityGuidelinesGoodStanding - Indicates whether channel respects YouTube's community guidelines. auditDetails.copyrightStrikesGoodStanding - Indicates whether channel copyright strikes. auditDetails.contentIdClaimsGoodStanding - Indicates whether channel unresolved claims. contentOwnerDetails - contentOwnerDetails object encapsulates channel data relevant YouTube Partners linked channel. contentOwnerDetails.contentOwner - ID content owner linked channel. contentOwnerDetails.timeLinked - date time channel linked content owner. value specified ISO 8601 format. localizations - localizations object encapsulates translations channel's metadata. localizations.(key) - language localized metadata associated key value. localizations.(key).title - localized channel title. localizations.(key).description - localized channel description.","code":""},{"path":"/reference/ryt_get_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get channel info from 'YouTube API' — ryt_get_channels","text":"","code":"if (FALSE) { channels <- ryt_get_channels()  }"},{"path":"/reference/ryt_get_channel_activities.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list of channel activity events — ryt_get_channel_activities","title":"Returns a list of channel activity events — ryt_get_channel_activities","text":"Returns list channel activity events","code":""},{"path":"/reference/ryt_get_channel_activities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list of channel activity events — ryt_get_channel_activities","text":"","code":"ryt_get_channel_activities(   part = c(\"contentDetails\", \"id\", \"snippet\"),   fields = NULL )"},{"path":"/reference/ryt_get_channel_activities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list of channel activity events — ryt_get_channel_activities","text":"part part parameter specifies comma-separated list one activity resource properties API response include. See API documentation. fields Fields video metadata see Properties","code":""},{"path":"/reference/ryt_get_channel_activities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list of channel activity events — ryt_get_channel_activities","text":"tibble channel activies","code":""},{"path":"/reference/ryt_get_channel_activities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns a list of channel activity events — ryt_get_channel_activities","text":"Parts fields part: contentDetails id snippet parts fields details kind - Identifies API resource's type. etag - Etag resource. id - ID YouTube uses uniquely identify activity. snippet - snippet object contains basic details activity, including activity's type group ID. snippet.publishedAt - date time activity occurred. snippet.channelId - ID YouTube uses uniquely identify channel associated activity. snippet.title - title resource primarily associated activity. snippet.description - description resource primarily associated activity. snippet.thumbnails - map thumbnail images associated resource primarily associated activity. snippet.thumbnails.(key) - Valid key values : default, medium, high, standard, maxres snippet.thumbnails.(key).url - image's URL. snippet.thumbnails.(key).width - image's width. snippet.thumbnails.(key).height - image's height. snippet.channelTitle - Channel title channel responsible activity snippet.type - type activity resource describes. snippet.groupId - group ID associated activity. contentDetails - contentDetails object contains information content associated activity. contentDetails.upload - upload object contains information uploaded video. contentDetails.upload.videoId - ID YouTube uses uniquely identify uploaded video. contentDetails.like - like object contains information resource received positive (like) rating. contentDetails.like.resourceId - resourceId object contains information identifies rated resource. contentDetails.like.resourceId.kind - type API resource. contentDetails.like.resourceId.videoId - ID YouTube uses uniquely identify video, rated resource video. contentDetails.favorite - favorite object contains information video marked favorite video. contentDetails.favorite.resourceId - resourceId object contains information identifies resource marked favorite. contentDetails.favorite.resourceId.kind - type API resource. contentDetails.favorite.resourceId.videoId - ID YouTube uses uniquely identify favorite video. contentDetails.comment - comment object contains information resource received comment. property present snippet.type comment. contentDetails.comment.resourceId - resourceId object contains information identifies resource associated comment. contentDetails.comment.resourceId.kind - type API resource. contentDetails.comment.resourceId.videoId - ID YouTube uses uniquely identify video associated comment. contentDetails.comment.resourceId.channelId - ID YouTube uses uniquely identify channel associated comment. contentDetails.subscription - subscription object contains information channel user subscribed . contentDetails.subscription.resourceId - resourceId object contains information identifies resource user subscribed . contentDetails.subscription.resourceId.kind - type API resource. contentDetails.subscription.resourceId.channelId - ID YouTube uses uniquely identify channel user subscribed . contentDetails.playlistItem - playlistItem object contains information new playlist item. contentDetails.playlistItem.resourceId - resourceId object contains information identifies resource added playlist. contentDetails.playlistItem.resourceId.kind - type API resource. contentDetails.playlistItem.resourceId.videoId - ID YouTube uses uniquely identify video added playlist. property present resourceId.kind youtube#video. contentDetails.playlistItem.playlistId - value YouTube uses uniquely identify playlist. contentDetails.playlistItem.playlistItemId - value YouTube uses uniquely identify item playlist. contentDetails.recommendation - recommendation object contains information recommended resource. property present snippet.type recommendation. contentDetails.recommendation.resourceId - resourceId object contains information identifies recommended resource. contentDetails.recommendation.resourceId.kind - type API resource. contentDetails.recommendation.resourceId.videoId - ID YouTube uses uniquely identify video, recommended resource video. contentDetails.recommendation.resourceId.channelId - ID YouTube uses uniquely identify channel, recommended resource channel. contentDetails.recommendation.reason - reason resource recommended user. contentDetails.recommendation.seedResourceId - seedResourceId object contains information resource caused recommendation. contentDetails.recommendation.seedResourceId.kind - type API resource. contentDetails.recommendation.seedResourceId.videoId - ID YouTube uses uniquely identify video, recommendation caused particular video. contentDetails.recommendation.seedResourceId.channelId - ID YouTube uses uniquely identify channel, recommendation caused particular channel. contentDetails.recommendation.seedResourceId.playlistId - ID YouTube uses uniquely identify playlist, recommendation caused particular playlist. contentDetails.social - social object contains details social network post. contentDetails.social.type - name social network. contentDetails.social.resourceId - resourceId object encapsulates information identifies resource associated social network post. contentDetails.social.resourceId.kind - type API resource. contentDetails.social.resourceId.videoId - ID YouTube uses uniquely identify video featured social network post, post refers video. contentDetails.social.resourceId.channelId - ID YouTube uses uniquely identify channel featured social network post, post refers channel. property present value social. contentDetails.social.resourceId.playlistId - ID YouTube uses uniquely identify playlist featured social network post, post refers playlist. contentDetails.social.author - author social network post. contentDetails.social.referenceUrl - URL social network post. contentDetails.social.imageUrl - image post's author. contentDetails.channelItem - channelItem object contains details resource added channel. contentDetails.channelItem.resourceId - resourceId object contains information identifies resource added channel.","code":""},{"path":"/reference/ryt_get_channel_activities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list of channel activity events — ryt_get_channel_activities","text":"","code":"if (FALSE) {  channel_activities <- ryt_get_channel_activities()  }"},{"path":"/reference/ryt_get_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list of comment threads of video or channel — ryt_get_comments","title":"Returns a list of comment threads of video or channel — ryt_get_comments","text":"Returns list comment threads video channel","code":""},{"path":"/reference/ryt_get_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list of comment threads of video or channel — ryt_get_comments","text":"","code":"ryt_get_comments(   video_id = NULL,   channel_id = NULL,   text_format = c(\"plainText\", \"html\") )"},{"path":"/reference/ryt_get_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list of comment threads of video or channel — ryt_get_comments","text":"video_id YouTUbe Video ID channel_id YouTube Channel ID text_format Set parameter's value html plainText instruct API return comments left users html formatted plain text. default value plainText","code":""},{"path":"/reference/ryt_get_comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list of comment threads of video or channel — ryt_get_comments","text":"tibble comments","code":""},{"path":[]},{"path":"/reference/ryt_get_comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list of comment threads of video or channel — ryt_get_comments","text":"","code":"if (FALSE) { # all comments comments <- ryt_get_comments()  # videos comments video_comments <- ryt_get_comments(video_id = 'fW7gGS^G78') }"},{"path":"/reference/ryt_get_playlists.html","id":null,"dir":"Reference","previous_headings":"","what":"Get playlist from 'YouTube API' — ryt_get_playlists","title":"Get playlist from 'YouTube API' — ryt_get_playlists","text":"Get playlist 'YouTube API'","code":""},{"path":"/reference/ryt_get_playlists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get playlist from 'YouTube API' — ryt_get_playlists","text":"","code":"ryt_get_playlists(   part = c(\"contentDetails\", \"id\", \"localizations\", \"player\", \"snippet\", \"status\"),   fields = NULL )"},{"path":"/reference/ryt_get_playlists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get playlist from 'YouTube API' — ryt_get_playlists","text":"part parts playist metadata, see API documentation. fields Fields video metadata, see API documentation.","code":""},{"path":"/reference/ryt_get_playlists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get playlist from 'YouTube API' — ryt_get_playlists","text":"tibble playlist metadata","code":""},{"path":"/reference/ryt_get_playlists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get playlist from 'YouTube API' — ryt_get_playlists","text":"Parts fields part: contentDetails id localizations player snippet status parts fields details kind - Identifies API resource's type. etag - Etag resource. id - ID YouTube uses uniquely identify playlist. snippet - snippet object contains basic details playlist, title description. snippet/publishedAt - date time playlist created. snippet/channelId - ID YouTube uses uniquely identify channel published playlist. snippet/title - playlist's title. snippet/description - playlist's description. snippet/thumbnails - map thumbnail images associated playlist. snippet/thumbnails/(key) - Valid key values : default, medium, high, standard, maxres snippet/thumbnails/(key)/url - image's URL. snippet/thumbnails/(key)/width - image's width. snippet/thumbnails/(key)/height - image's height. snippet/channelTitle - channel title channel video belongs . snippet/defaultLanguage - language text playlist resource's snippet.title snippet.description properties. snippet/localized - snippet.localized object contains either localized title description playlist title default language playlist's metadata. snippet/localized/title - localized playlist title. snippet/localized/description - localized playlist description. status - status object contains status information playlist. status/privacyStatus - playlist's privacy status. contentDetails - contentDetails object contains information playlist content, including number videos playlist. contentDetails/itemCount - number videos playlist. player - player object contains information use play playlist embedded player. player/embedHtml - iframe tag embeds player play playlist. localizations - localizations object encapsulates translations playlist's metadata. localizations/(key) - language localized text associated key value. localizations/(key)/title - localized playlist title. localizations/(key)/description - localized playlist description.","code":""},{"path":"/reference/ryt_get_playlists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get playlist from 'YouTube API' — ryt_get_playlists","text":"","code":"if (FALSE) { pl <- ryt_get_playlists(     part = c('id', 'contentDetails', 'snippet'),     fields = 'items(id,snippet/channelId,snippet/title,contentDetails/itemCount)'  ) }"},{"path":"/reference/ryt_get_playlist_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Get playlist items data on 'YouTube' — ryt_get_playlist_items","title":"Get playlist items data on 'YouTube' — ryt_get_playlist_items","text":"Get playlist items data 'YouTube'","code":""},{"path":"/reference/ryt_get_playlist_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get playlist items data on 'YouTube' — ryt_get_playlist_items","text":"","code":"ryt_get_playlist_items(   playlist_id,   part = c(\"contentDetails\", \"id\", \"snippet\", \"status\"),   fields = NULL,   cl = NULL )"},{"path":"/reference/ryt_get_playlist_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get playlist items data on 'YouTube' — ryt_get_playlist_items","text":"playlist_id Playlist ID, see ryt_get_playlists. part part parameter specifies comma-separated list one playlistItem resource properties API response include. see API documentation. fields fields parameter filters API response, contains resource parts identified part parameter value, response includes specific set fields. see API documentation. cl cluster object created makeCluster, integer indicate number child-processes (integer values ignored Windows) parallel evaluations (see Details performance).","code":""},{"path":"/reference/ryt_get_playlist_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get playlist items data on 'YouTube' — ryt_get_playlist_items","text":"tibble playlist items details","code":""},{"path":"/reference/ryt_get_playlist_items.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get playlist items data on 'YouTube' — ryt_get_playlist_items","text":"Parts fields part: contentDetails id snippet status parts fields details kind - Identifies API resource's type. value youtube#playlistItemListResponse. etag - Etag resource. id - ID YouTube uses uniquely identify playlist item. snippet - snippet object contains basic details playlist item, title position playlist. snippet/publishedAt - date time item added playlist. snippet/channelId - ID YouTube uses uniquely identify user added item playlist. snippet/title - item's title. snippet/description - item's description. snippet/thumbnails - map thumbnail images associated playlist item. snippet/thumbnails/(key) - Valid key values : default, medium, high, standard, maxres snippet/thumbnails/(key)/url - image's URL. snippet/thumbnails/(key)/width - image's width. snippet/thumbnails/(key)/height - image's height. snippet/channelTitle - channel title channel playlist item belongs . snippet/videoOwnerChannelTitle - channel title channel uploaded video. snippet/videoOwnerChannelId - channel ID channel uploaded video. snippet/playlistId - ID YouTube uses uniquely identify playlist playlist item . snippet/position - order item appears playlist. snippet/resourceId\t- id object contains information can used uniquely identify resource included playlist playlist item. snippet/resourceId.kind - kind, type, referred resource. snippet/resourceId/videoId - snippet.resourceId.kind property's value youtube#video, property present value contain ID YouTube uses uniquely identify video playlist. contentDetails - contentDetails object included resource included item YouTube video. object contains additional information video. contentDetails/videoId - ID YouTube uses uniquely identify video. contentDetails/note - user-generated note item. property value maximum length 280 characters. contentDetails/videoPublishedAt - date time video published YouTube. status - status object contains information playlist item's privacy status. status/privacyStatus - playlist item's privacy status.","code":""},{"path":"/reference/ryt_get_playlist_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get playlist items data on 'YouTube' — ryt_get_playlist_items","text":"","code":"if (FALSE) { # get playlist ids and title pl <- ryt_get_playlists(part = c('id', 'snippet'), fields = 'items(id, snippet/title)')  # get itemms of first playlist pli <- ryt_get_playlist_items(     playlist_id = pl$id[1],     part = c('contentDetails', 'snippet'),     fields = 'items(id,snippet/channelId,snippet/title,contentDetails/videoId)'  ) }"},{"path":"/reference/ryt_get_videos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of your videos from 'YouTube' — ryt_get_videos","title":"Get list of your videos from 'YouTube' — ryt_get_videos","text":"Get list videos 'YouTube'","code":""},{"path":"/reference/ryt_get_videos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of your videos from 'YouTube' — ryt_get_videos","text":"","code":"ryt_get_videos()"},{"path":"/reference/ryt_get_videos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of your videos from 'YouTube' — ryt_get_videos","text":"tibble video list","code":""},{"path":"/reference/ryt_get_video_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Get detail data of your videos on 'YouTube' — ryt_get_video_details","title":"Get detail data of your videos on 'YouTube' — ryt_get_video_details","text":"Get detail data videos 'YouTube'","code":""},{"path":"/reference/ryt_get_video_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get detail data of your videos on 'YouTube' — ryt_get_video_details","text":"","code":"ryt_get_video_details(   video_id,   part = c(\"contentDetails\", \"fileDetails\", \"id\", \"liveStreamingDetails\",     \"localizations\", \"player\", \"processingDetails\", \"recordingDetails\", \"snippet\",     \"statistics\", \"status\", \"suggestions\", \"topicDetails\"),   fields = NULL,   cl = NULL )"},{"path":"/reference/ryt_get_video_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get detail data of your videos on 'YouTube' — ryt_get_video_details","text":"video_id Video ID, see ryt_get_videos. part parameter identifies one top-level (non-nested) resource properties included API response. Posible values: snippet, contentDetails, fileDetails, player, processingDetails, recordingDetails, statistics, status, suggestions, topicDetails.See API documentation. fields Fields video metadata, see API documentation. cl cluster object created makeCluster, integer indicate number child-processes (integer values ignored Windows) parallel evaluations (see Details performance).","code":""},{"path":"/reference/ryt_get_video_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get detail data of your videos on 'YouTube' — ryt_get_video_details","text":"tibble video details","code":""},{"path":"/reference/ryt_get_video_details.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get detail data of your videos on 'YouTube' — ryt_get_video_details","text":"get information videos parts fields go link Properties: kind - Identifies API resource's type. value youtube#video. etag - Etag resource. id - ID YouTube uses uniquely identify video. snippet - snippet object contains basic details video, title, description, category. snippet/publishedAt - date time video published. Note time might different time video uploaded. snippet/channelId - ID YouTube uses uniquely identify channel video uploaded . snippet/title - video's title. snippet/description - video's description. snippet/thumbnails - map thumbnail images associated video. snippet/thumbnails/(key) - Valid key values : default, medium, high, standard, maxres snippet/thumbnails/(key)/url - image's URL. snippet/thumbnails/(key)/width - image's width. snippet/thumbnails/(key)/height - image's height. snippet/channelTitle - Channel title channel video belongs . snippet/tags[] - list keyword tags associated video. snippet/categoryId - YouTube video category associated video. snippet/liveBroadcastContent - Indicates video upcoming/active live broadcast. snippet/defaultLanguage - language text video resource's snippet.title snippet.description properties. snippet/localized - snippet.localized object contains either localized title description video title default language video's metadata. snippet/localized/title - localized video title. snippet/localized/description - localized video description. snippet/defaultAudioLanguage - default_audio_language property specifies language spoken video's default audio track. contentDetails - contentDetails object contains information video content, including length video indication whether captions available video. contentDetails/duration - length video. contentDetails/dimension - Indicates whether video available 3D 2D. contentDetails/definition - Indicates whether video available high definition (HD) standard definition. contentDetails/caption - Indicates whether captions available video. contentDetails/licensedContent - Indicates whether video represents licensed content, means content uploaded channel linked YouTube content partner claimed partner. contentDetails/regionRestriction - regionRestriction object contains information countries video () viewable. contentDetails/regionRestriction/allowed[] - list region codes identify countries video viewable. contentDetails/regionRestriction/blocked[] - list region codes identify countries video blocked. contentDetails/contentRating - Specifies ratings video received various rating schemes. contentDetails/contentRating/acbRating - video's Australian Classification Board (ACB) Australian Communications Media Authority (ACMA) rating. ACMA ratings used classify children's television programming. contentDetails/contentRating/agcomRating - video's rating Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM). contentDetails/contentRating/anatelRating - video's Anatel (Asociación Nacional de Televisión) rating Chilean television. contentDetails/contentRating/bbfcRating - video's British Board Film Classification (BBFC) rating. contentDetails/contentRating/bfvcRating - video's rating Thailand's Board Film Video Censors. contentDetails/contentRating/bmukkRating - video's rating Austrian Board Media Classification. contentDetails/contentRating/catvRating - Rating system Canadian TV - Canadian TV Classification System video's rating Canadian Radio-Television Telecommunications Commission (CRTC) Canadian English-language broadcasts. contentDetails/contentRating/catvfrRating - video's rating Canadian Radio-Television Telecommunications Commission (CRTC) Canadian French-language broadcasts. contentDetails/contentRating/cbfcRating - video's Central Board Film Certification (CBFC - India) rating. contentDetails/projection - Specifies projection format video. contentDetails/hasCustomThumbnail - Indicates whether video uploader provided custom thumbnail image video. property visible video uploader. status - status object contains information video's uploading, processing, privacy statuses. status/uploadStatus - status uploaded video. status/failureReason - value explains video failed upload. property present uploadStatus property indicates upload failed. status/rejectionReason - value explains YouTube rejected uploaded video. status/privacyStatus - video's privacy status. status/publishAt - date time video scheduled publish. can set privacy status video private. status/license - video's license. status/embeddable - value indicates whether video can embedded another website. status/publicStatsViewable - value indicates whether extended video statistics video's watch page publicly viewable. status/madeForKids - value indicates whether video designated child-directed, contains current \"made kids\" status video. status/selfDeclaredMadeForKids - videos.insert videos.update request, property allows channel owner designate video child-directed. statistics - statistics object contains statistics video. statistics/viewCount - number times video viewed. statistics/likeCount - number users indicated liked video. statistics/dislikeCount - number users indicated disliked video. statistics/commentCount - number comments video. player - player object contains information use play video embedded player. player/embedHtml - iframe tag embeds player plays video. player/embedHeight - height embedded player returned player.embedHtml property. player/embedWidth - width embedded player returned player.embedHtml property. topicDetails - topicDetails object encapsulates information topics associated video. topicDetails/relevantTopicIds[] - list topic IDs relevant video. topicDetails/topicCategories[] - list Wikipedia URLs provide high-level description video's content. recordingDetails - recordingDetails object encapsulates information location, date address video recorded. recordingDetails/location - geolocation information associated video. recordingDetails/recordingDate - date time video recorded. fileDetails - fileDetails object encapsulates information video file uploaded YouTube, including file's resolution, duration, audio video codecs, stream bitrates, . fileDetails/fileName - uploaded file's name. fileDetails/fileSize - uploaded file's size bytes. fileDetails/fileType - uploaded file's type detected YouTube's video processing engine. fileDetails/container - uploaded video file's container format. fileDetails/videoStreams[] - list video streams contained uploaded video file. fileDetails/videoStreams[]/widthPixels - encoded video content's width pixels. fileDetails/videoStreams[]/heightPixels - encoded video content's height pixels. fileDetails/videoStreams[]/frameRateFps - video stream's frame rate, frames per second. fileDetails/videoStreams[]/aspectRatio - video content's display aspect ratio, specifies aspect ratio video displayed. fileDetails/videoStreams[]/codec - video codec stream uses. fileDetails/videoStreams[]/bitrateBps - video stream's bitrate, bits per second. fileDetails/videoStreams[]/rotation - amount YouTube needs rotate original source content properly display video. fileDetails/videoStreams[]/vendor - value uniquely identifies video vendor. fileDetails/audioStreams[] - list audio streams contained uploaded video file. fileDetails/audioStreams[]/channelCount - number audio channels stream contains. fileDetails/audioStreams[]/codec - audio codec stream uses. fileDetails/audioStreams[]/bitrateBps - audio stream's bitrate, bits per second. fileDetails/audioStreams[]/vendor - value uniquely identifies video vendor. fileDetails/durationMs - length uploaded video milliseconds. fileDetails/bitrateBps - uploaded video file's combined (video audio) bitrate bits per second. fileDetails/creationTime - date time uploaded video file created. processingDetails - processingDetails object encapsulates information YouTube's progress processing uploaded video file. processingDetails/processingStatus - video's processing status. processingDetails/processingProgress - processingProgress object contains information progress YouTube made processing video. processingDetails/processingProgress/partsTotal - estimate total number parts need processed video. processingDetails/processingProgress/partsProcessed - number parts video YouTube already processed. processingDetails/processingProgress/timeLeftMs - estimate amount time, millseconds, YouTube needs finish processing video. processingDetails/processingFailureReason - reason YouTube failed process video. processingDetails/fileDetailsAvailability - value indicates whether file details available uploaded video. processingDetails/processingIssuesAvailability - value indicates whether video processing engine generated suggestions might improve YouTube's ability process video, warnings explain video processing problems, errors cause video processing problems. processingDetails/tagSuggestionsAvailability - value indicates whether keyword (tag) suggestions available video. processingDetails/editorSuggestionsAvailability - value indicates whether video editing suggestions, might improve video quality playback experience, available video. processingDetails/thumbnailsAvailability - value indicates whether thumbnail images generated video. suggestions - suggestions object encapsulates suggestions identify opportunities improve video quality metadata uploaded video. suggestions/processingErrors[] - list errors prevent YouTube successfully processing uploaded video. suggestions/processingWarnings[] - list reasons YouTube may difficulty transcoding uploaded video might result erroneous transcoding. suggestions/processingHints[] - list suggestions may improve YouTube's ability process video. suggestions/tagSuggestions[] - list keyword tags added video's metadata increase likelihood users locate video searching browsing YouTube. suggestions/tagSuggestions[]/tag - keyword tag suggested video. suggestions/tagSuggestions[].categoryRestricts[] - set video categories tag relevant. suggestions/editorSuggestions[] - list video editing operations might improve video quality playback experience uploaded video. liveStreamingDetails - liveStreamingDetails object contains metadata live video broadcast. liveStreamingDetails/actualStartTime - time broadcast actually started. liveStreamingDetails/actualEndTime - time broadcast actually ended. liveStreamingDetails/scheduledStartTime - time broadcast scheduled begin. liveStreamingDetails/scheduledEndTime - time broadcast scheduled end. liveStreamingDetails/concurrentViewers - number viewers currently watching broadcast. liveStreamingDetails/activeLiveChatId - ID currently active live chat attached video. localizations - localizations object contains translations video's metadata. localizations/(key) - language localized text associated key value. localizations/(key).title - localized video title. localizations/(key).description - localized video description.","code":""},{"path":"/reference/ryt_get_video_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get detail data of your videos on 'YouTube' — ryt_get_video_details","text":"","code":"if (FALSE) { # get all videos videos <- ryt_get_videos()  # get all videos metadata videos_details <- ryt_get_video_details(     video_id = videos$id_video_id )  # get only snippet and statistics part videos_details <- ryt_get_video_details(     video_id = videos$id_video_id,     part = c('snippet', 'statistics') )  # get only id, channelId, title and view_count fields videos_details <- ryt_get_video_details(     video_id = videos$id_video_id,     part = c('snippet', 'statistics'),     fields = \"items(id,snippet(channelId,title),statistics(viewCount))\" )  # same with other fields syntax like part/field # get only id, channelId, title and view_count fields videos_details <- ryt_get_video_details(     video_id = videos$id_video_id,     part = c('snippet', 'statistics'),     fields = \"items(id,snippet/channelId,snippet/title,statistics/viewCount)\" ) }"},{"path":"/reference/ryt_has_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Is there a token on hand? — ryt_has_token","title":"Is there a token on hand? — ryt_has_token","text":"Reports whether rytstat stored token, ready use downstream requests.","code":""},{"path":"/reference/ryt_has_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is there a token on hand? — ryt_has_token","text":"","code":"ryt_has_token()"},{"path":"/reference/ryt_has_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is there a token on hand? — ryt_has_token","text":"Logical.","code":""},{"path":[]},{"path":"/reference/ryt_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search channels, playlists or videos on YouTube — ryt_search","title":"Search channels, playlists or videos on YouTube — ryt_search","text":"Returns collection search results match query parameters specified API request. default, search result set identifies matching video, channel, playlist resources, can also configure queries retrieve specific type resource.","code":""},{"path":"/reference/ryt_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search channels, playlists or videos on YouTube — ryt_search","text":"","code":"ryt_search(part = \"snippet\", ...)"},{"path":"/reference/ryt_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search channels, playlists or videos on YouTube — ryt_search","text":"part part parameter specifies comma-separated list one search resource properties API response include. Set parameter value snippet. ... Filters Optional parameters resources search. See list allowed params. can set params names came snake case.","code":""},{"path":"/reference/ryt_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search channels, playlists or videos on YouTube — ryt_search","text":"resources list","code":""},{"path":"/reference/ryt_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search channels, playlists or videos on YouTube — ryt_search","text":"","code":"if (FALSE) { # search videos by query search_res_videos <- ryt_search(   type            = 'video',   q               = 'r language tutorial',   published_after = '2022-03-01T00:00:00Z',   published_before = '2022-06-01T00:00:00Z',   max_results     = 10 )  # search playlists by query search_res_playlists <- ryt_search(   type             = 'playlist',   q                = 'r language tutorial',   published_after  = '2022-03-01T00:00:00Z',   published_before = '2022-06-01T00:00:00Z',   max_results      = 50 )  # search channel by query search_res_channels <- ryt_search( type             = 'channel', q                = 'r language tutorial', published_after  = '2022-03-01T00:00:00Z',   published_before = '2022-06-01T00:00:00Z',   max_results      = 50 )  # Search in own videos search_own_dplyr_videos <- ryt_search(   type             = 'video',   for_mine         = TRUE,   q                = 'dplyr' )  # Search channels and get title and id search_chn <-  ryt_search(    type   = 'channel',    q      = 'R4marketing',    fields = 'items(snippet(title,channelId))' )  # Search videos in the channel by query and channel id search_channel_dplyr_videos <- ryt_search(   type       = 'video',   q          = 'dplyr',   channel_id = \"UCyHC6R3mCCP8bhD9tPbjnzQ\" ) }"},{"path":"/reference/ryt_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce configured token — ryt_token","title":"Produce configured token — ryt_token","text":"internal use programming around YouTube API. Returns token pre-processed httr::config(). users need handle tokens \"hand\" , even need control, ryt_auth() need. current token, ryt_auth() called either load cache initiate OAuth2.0 flow. auth deactivated via ryt_deauth(), ryt_token() returns NULL.","code":""},{"path":"/reference/ryt_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce configured token — ryt_token","text":"","code":"ryt_token()"},{"path":"/reference/ryt_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce configured token — ryt_token","text":"request object (S3 class provided httr).","code":""},{"path":[]},{"path":"/reference/ryt_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Get info on current user — ryt_user","title":"Get info on current user — ryt_user","text":"Reveals email address user associated current token. token loaded yet, function initiate auth.","code":""},{"path":"/reference/ryt_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get info on current user — ryt_user","text":"","code":"ryt_user()"},{"path":"/reference/ryt_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get info on current user — ryt_user","text":"email address , token loaded, NULL.","code":""},{"path":[]},{"path":[]},{"path":"/news/index.html","id":"новая-функция-0-3-0","dir":"Changelog","previous_headings":"","what":"Новая функция","title":"rytstat 0.3.0","text":"В пакет добавлена функция ryt_search(), предназначенная для поиска видео, плей листов и каналов, не обязательно вашего авторства.","code":""},{"path":"/news/index.html","id":"основное-0-3-0","dir":"Changelog","previous_headings":"","what":"Основное","title":"rytstat 0.3.0","text":"В функциях ryt_get_video_details(), ryt_get_playlists(), ryt_get_channel_activities(), ryt_get_channels() и ryt_get_playlist_items() аргумент fields переименован в part, и добавлен аргумент fields, который позволяет запрашивать отдельные поля частей запроса. Примеры работы с новыми аргументами добавлены в справку функции.","code":""},{"path":"/news/index.html","id":"документация-0-3-0","dir":"Changelog","previous_headings":"","what":"Документация","title":"rytstat 0.3.0","text":"Расширена документации функций ryt_get_video_details(), ryt_get_playlists(), ryt_get_channel_activities(), ryt_get_channels() и ryt_get_playlist_items() в неё добавлены примеры с использованием аргумента fields, и добавлен перечень частей (parts) и полей (fields).","code":""},{"path":"/news/index.html","id":"другое-0-3-0","dir":"Changelog","previous_headings":"","what":"Другое","title":"rytstat 0.3.0","text":"Вшитый в rytstat OAuth клиент был подтверждён Google, теперь все пользователи пакета могут использовать его для авторизациию","code":""},{"path":"/news/index.html","id":"rytstat-021","dir":"Changelog","previous_headings":"","what":"rytstat 0.2.1","title":"rytstat 0.2.1","text":"CRAN release: 2021-12-07","code":""},{"path":"/news/index.html","id":"документация-0-2-1","dir":"Changelog","previous_headings":"","what":"Документация","title":"rytstat 0.2.1","text":"Исправлены ссылки в README и DESCRIPTION","code":""},{"path":[]},{"path":"/news/index.html","id":"новые-функции-0-2-0","dir":"Changelog","previous_headings":"","what":"Новые функции","title":"rytstat 0.2.0","text":"Доработал функцию ryt_get_playlists() таким образом, что бы она разворачивала все вложенные столбцы. Добавлена функция ryt_get_playlist_items(), которая позволяет запросить элементы плейлиста YouTube. Добавлена функция ryt_get_channels(), которая позволяет получить метаданные по каналу. Добавдена функция ryt_get_channel_activities(), которая позволяет получить список активностей связанных с вашим каналом. Добавлена функция ryt_get_comments(), которая позволяет запросить список комментариев к видео или каналу.","code":""},{"path":"/news/index.html","id":"исправления-ошибок-0-2-0","dir":"Changelog","previous_headings":"","what":"Исправления ошибок","title":"rytstat 0.2.0","text":"Исправлено поведение функции ryt_get_analytics(), ранее нельзя было изменить параметр dimensions, он всегда при запросе был равен ‘day’.","code":""},{"path":"/news/index.html","id":"названия-функций-0-2-0","dir":"Changelog","previous_headings":"","what":"Названия функций","title":"rytstat 0.2.0","text":"ryt_reports_create_job() -> ryt_create_job() ryt_reports_get_job_list() -> ryt_get_job_list() ryt_reports_get_report_list() -> ryt_get_report_list() ryt_reports_delete_job() -> ryt_delete_job() ryt_get_video_list() -> ryt_get_videos()","code":""},{"path":"/news/index.html","id":"документация-0-2-0","dir":"Changelog","previous_headings":"","what":"Документация","title":"rytstat 0.2.0","text":"В документацию всех функций добавлены примеры кода. Создан официальный сайт пакета rytstat - https://selesnow.github.io/rytstat/docs","code":""},{"path":"/news/index.html","id":"прочее-0-2-0","dir":"Changelog","previous_headings":"","what":"Прочее","title":"rytstat 0.2.0","text":"Начиная с версии 0.2.0 пакет требует разрешение https://www.googleapis.com/auth/youtube.force-ssl, которое позволяет rytstat просматривать комментарии.","code":""},{"path":"/news/index.html","id":"rytstat-010","dir":"Changelog","previous_headings":"","what":"rytstat 0.1.0","title":"rytstat 0.1.0","text":"CRAN release: 2021-10-27 Добавлен NEWS.md для фиксации изменений в пакете. Пакет опубликован на CRAN.","code":""}]
